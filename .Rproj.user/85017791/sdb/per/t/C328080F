{
    "collab_server" : "",
    "contents" : "### PLOTTING FUNCTIONS ###\n\n\n\n#' Plots points to a map on a user defined lat-lon box, colorscale, limits and legend location\n#'\n#' @description This function plots points to a geographical map, with points having values which are indicated by a colorscale\n#' @usage function(plot_data,plot_data_area,breaks,colorscale,point_size,plotting_title)\n#' @details add here\n#' @param plot_data a data matrix (first column data, second lon, third lat)\n#' @param plot_data_area defines the data points which constitute the plotting area\n#' @param breaks a vector defining breaks for plotting\n#' @param colorscale the colorscale that is used in plot (if colorscale==points, do not plot any scale)\n#' @param point_size size of point to be plotted\n#' @param plotting_title plotting title\n#' @return A plot\n#' @export\n#'\nplot_points_on_map <- function(plot_data,plot_data_area,breaks,colorscale,point_size,plotting_title) {\n\n  # Removing missing values from plotting data\n  plot_data <- plot_data[which(rowSums(is.na(plot_data))==0),]\n  plot_data_area <- plot_data_area[which(rowSums(is.na(plot_data_area))==0),]\n  if (is.null(breaks)) {\n    breaks <- c( -2000, -500, -300, -200, -100, 100, 200, 300, 500, 2000)\n  }\n  par(mar=c(1.7,1,4,1),xpd=FALSE)\n  plotvar <- plot_data[,1]\n  tplot <- plot(plot_data_area[,2], plot_data_area[,3], axes=FALSE, cex=.5, type=\"n\", xlab=\"\", ylab=\"\", main=plotting_title)\n  map(\"world\", add=TRUE, lwd=.5, col=\"grey95\", fill=TRUE)\n  if (colorscale != \"points\") {\n    # Define number of colours to be used in plot\n    nclr <- (length(breaks) - 1)\n    brk <- breaks\n    # Define colour palette to be used\n    plotclr <- RColorBrewer::brewer.pal(nclr,colorscale)\n    # Define colour intervals and colour code variable for plotting\n    class <- classInt::classIntervals(plotvar, nclr, fixedBreaks= brk, style = \"fixed\")\n    colcode <- classInt::findColours(class, plotclr)\n    graphics::points(plot_data[,2], plot_data[,3], pch = 16, col= colcode, cex = point_size)\n    legend(\"bottomleft\", legend = names(attr(colcode, \"table\")), fill = attr(colcode, \"palette\"), cex = 0.7, bty = \"n\")\n    rm(nclr)\n    rm(brk)\n    rm(plotclr)\n    rm(class)\n    rm(colcode)\n  } else {\n    graphics::points(plot_data[,2], plot_data[,3], cex = point_size, pch = 16, col=\"red\")\n  }\n  rm(plotvar)\n\n  return(tplot)\n}\n\n\n## PLOTTING FUNCTIONS TO BE ADDED LATER\n# 1) plot_points_on_a_map2 The same function with histogram included and legend outside the plotting area.\n# 2) Boxplot with distribution (here, piirrettava3 is a 2d data frame with dimension names of variable and probability)\n# 3) Plotting two distributions as a function of forecast length (unfortunately the values in different columns are calculated outside this plotting routine). Here \"asemajoukko\" separates two datasets with a unique name)\n# 4) This is the same but without distribution around the plotted lines (only mean/median/etc), data frames other dimension has names of \"dataset\" and other \"fcst_period\"\n# 5) selection probability heatmap of mos coefficients\n\n\n\n\n",
    "created" : 1494849242932.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4004620583",
    "id" : "C328080F",
    "lastKnownWriteTime" : 1495113488,
    "last_content_update" : 1495113488521,
    "path" : "~/statcal/R_projects/MOSpointutils/R/functions_plotting.R",
    "project_path" : "R/functions_plotting.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}