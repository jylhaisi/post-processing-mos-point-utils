{
    "collab_server" : "",
    "contents" : "### This script creates the MOS station list which is read in main program, as well as several other station lists ###\nrm(list=ls())\nlibrary(LatticeKrig)\nlibrary(maps)\nlibrary(mapproj)\nlibrary(maptools)\nlibrary(RColorBrewer)\nlibrary(classInt)\nlibrary(gpclib)\nlibrary(mapdata)\nlibrary(xlsx)\nlibrary(MOSpointutils)\n# Create output directory for plot figures\nplot_dir <- paste(\"../station_lists/figures/\",sep=\"\")\nifelse(!dir.exists(file.path(plot_dir)), dir.create(file.path(plot_dir)), FALSE)\n# loading useful functions\nsource(\"../../point_data_analysis/functions_useful.R\")\n\n\n\n\n### Wmostations list is narrowed down based on requirements of\n# 1) Location homogeneity\n# 2) Data length\n# 3) Consistency between mos_stations and wmostations station locations\n# 4) no duplicate station locations, take only account the latest station location if several exists\n\n# Loading in frozen mos station list (combined with observation station metadata, created in script merge_observation_station_lists.R)\nmos_stations <- read.csv(\"../station_lists/mos_stations_frozen.csv\",stringsAsFactors = FALSE)\n\n# In addition to metadata in tables station and station_network_mapping, also other metadata needs to be combined to mos station list (such as fmisid -numbers).\n# This metadata can be found from CLDB_linked_to_MOS -\"history table\" \"wmostations\". This table contains the observation station location history.\n# This linked table is NOT frozen as tables \"station\" and \"station_network_mapping\".\nwmostations <- read.csv(\"../database_tables/CLDB_linked_to_MOS/wmostations_distinct_realtime_shortened_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nwmostations$membership_start <- as.POSIXct(wmostations$membership_start,tz=\"GMT\")\nwmostations$membership_end <- as.POSIXct(wmostations$membership_end,tz=\"GMT\")\n# Only those stations are used which have had a stationary location throughout MOS training period\n# => Removing those stations which have\n# 1) existed less than four years over MOS training period\n# OR\n# 2) not at all on date 15.10.2014 when MOS interpolation list was frozen\n# First date in MOS database is 1.12.2011, below (end_dates - start_dates) can get negative values.\n# These conditions will mostly affect Finnish stations which have much more station location metadata compared to foreign stations.\nfreeze_date <- as.POSIXct(\"2014-10-15 00:00:00\",tz=\"GMT\")\nstart_dates <- as.data.frame(wmostations$membership_start)\nstart_dates <- cbind(as.POSIXct(\"2011-12-01 00:00:00\",tz=\"GMT\"),start_dates)\nstart_dates <- as.POSIXct(apply(start_dates,1,max),tz=\"GMT\")\nend_dates <- as.data.frame(wmostations$membership_end)\nend_dates <- cbind(as.POSIXct(Sys.Date(),tz=\"GMT\"),end_dates)\nend_dates <- as.POSIXct(apply(end_dates,1,min),tz=\"GMT\")\nwmostations <- wmostations[which(TRUE==((wmostations$membership_start < freeze_date) & (wmostations$membership_end > freeze_date) & (as.numeric((end_dates - start_dates),units=\"days\") > (4*365)))),]\nrm(freeze_date)\nrm(start_dates)\nrm(end_dates)\n\n# Printing number of unique stations\n# mos_stations\nunique_locations <- unique(matrix(c(mos_stations$name,mos_stations$lon,mos_stations$lat),ncol=3))\nunique_stations <- matrix(unique(mos_stations$name))\ndim(unique_locations)[1]\ndim(unique_stations)[1]\nrm(unique_stations)\nrm(unique_locations)\n# wmostations\nunique_locations <- unique(matrix(c(wmostations$station_name,wmostations$loc_id,wmostations$lon,wmostations$lat),ncol=4))\nunique_stations <- matrix(unique(wmostations$station_name))\ndim(unique_locations)[1]\ndim(unique_stations)[1]\nrm(unique_stations)\nrm(unique_locations)\n\n# these stations have exactly the same name/lon/lat.\nmos_stations[which(TRUE==(duplicated(matrix(c(mos_stations$name,mos_stations$lon,mos_stations$lat),ncol=3)))),]\nwmostations[which(TRUE==(duplicated(matrix(c(wmostations$station_name,wmostations$lon,wmostations$lat),ncol=3)))),]\n# these have the same name\nmos_stations[which(TRUE==((duplicated(mos_stations$name)))),]\nwmostations[which(TRUE==((duplicated(wmostations$station_name)))),]\n# These stations have the same wmo number\nmos_stations[which(TRUE==((duplicated(mos_stations$station_id)))),]\nwmostations[which(TRUE==((duplicated(wmostations$wmon)))),]\n\n\n# Coordinates in wmostations might not be correct. The coordinates in mos_stations are used to narrow down stations in wmostations.\n# Making a list of mos_stations which correspond to wmostations (all wmon numbers in mos_stations are unique)\nmatching_list <- mos_stations[match(wmostations$wmon,mos_stations$station_id),]\n\n# Comparing coordinates in wmostations to fixed coordinates in mos_stations.\n# If either lat/lon coordinates differ >0.05 degrees between them, remove station. Also remove stations which are not among mos_stations.\nwmostations <- cbind(wmostations,matching_list$h,matching_list$lon,matching_list$lat)\nnames(wmostations)[((dim(wmostations)[2]-2):dim(wmostations)[2])] <- c(\"h_matching_list\",\"lon_matching_list\",\"lat_matching_list\")\nwmostations <- na.omit(wmostations)\nwmostations <- wmostations[(abs(wmostations$lon-wmostations$lon_matching_list)<0.05 & abs(wmostations$lat-wmostations$lat_matching_list)<0.05),]\n# mos interpolation points are based on tables station(_network_mapping) -> list mos_stations\n# -> Replacing location points in wmostations with those of mos_stations\nwmostations <- wmostations[,-(which(names(wmostations) %in% c(\"h\",\"lon\",\"lat\")))]\nnames(wmostations)[(which(names(wmostations) %in% c(\"h_matching_list\",\"lon_matching_list\",\"lat_matching_list\")))] <- c(\"h\",\"lon\",\"lat\")\nrm(matching_list)\n\n# Now wmostations (conversion list) contains those stations which\n# 1) Are located approximately at same location with frozen mos_stations list for a sufficiently long time over mos training period (min of 4 years)\n# 2) Have observations available from same lcation throughout mos training period\n# 3) have a WMO number equivalent in the frozen mos_stations list. If observations would not done anymore from this location, MOS forecasts could still be produced to this point.\n\nunique_stations <- unique(matrix(c(wmostations$wmon,wmostations$fmisid),ncol=2))\ndim(unique_stations)[1]\nrm(unique_stations)\nduplicated_stations <- wmostations[duplicated(matrix(c(wmostations$wmon,wmostations$fmisid),ncol=2)),]\ndim(duplicated_stations)[1]\nrm(duplicated_stations)\nunique_stations <- unique(matrix(c(wmostations$wmon),ncol=1))\ndim(unique_stations)[1]\nrm(unique_stations)\nduplicated_stations <- wmostations[duplicated(wmostations$wmon),]\ndim(duplicated_stations)[1]\nrm(duplicated_stations)\nunique_stations <- unique(matrix(c(wmostations$fmisid),ncol=1))\ndim(unique_stations)[1]\nrm(unique_stations)\nduplicated_stations <- wmostations[duplicated(wmostations$fmisid),]\ndim(duplicated_stations)[1]\nrm(duplicated_stations)\n\n# Sorting stations according to their WMO number and removing duplicate stations\nwmostations <- wmostations[order(wmostations$wmon),]\nduplicates <- wmostations$wmon[which(duplicated(wmostations$wmon))]\nif (length(duplicates)>0) {\n  for (i in 1:length(duplicates)) {\n    # These station locations of a certain duplicate WMO number (index i) have been operational at the time when mos interpolation list was frozen (15.10.2014)\n    station_active_on_151014 <- (as.POSIXct(wmostations$loc_start[which(wmostations$wmon==duplicates[i])],tz=\"GMT\")-as.POSIXct(\"2014-10-15 00:00:00 GMT\",tz=\"GMT\"))<0 & (as.POSIXct(wmostations$loc_end[which(wmostations$wmon==duplicates[i])],tz=\"GMT\")-as.POSIXct(\"2014-10-15 00:00:00 GMT\",tz=\"GMT\")>0)\n    # If several locations for certain station exist at the time of mos list creation, leave only the latest in the list\n    if (sum(station_active_on_151014)>1) {\n      station_active_on_151014[-(tail(which(station_active_on_151014),1))] <- FALSE\n    }\n    # Assigning empty value for all stations which have not been active on 151014\n    wmostations[which(wmostations$wmon==duplicates[i])[!station_active_on_151014],] <- NA\n    rm(station_active_on_151014)\n  }\n  rm(i)\n}\nrm(duplicates)\nwmostations <- na.omit(wmostations)\n\n# These stations have exactly the same lon/lat value. However, wmo-numbers are unique to them as well\nwmostations[which(TRUE==(duplicated(matrix(c(wmostations$lon,wmostations$lat),ncol=2)))),]\nunique_locations <- unique(matrix(wmostations$wmon))\nrm(unique_locations)\n# From the stations which have duplicated lat/lon values, manually remove selected stations from Europe. Outside Europe only the latter stations in duplicate list are preserved.\n# WHEN MOS IS EXPANDED OUTSIDE EUROPE, GO THROUGH THIS LIST AGAIN AND SEE WHICH STATIONS SHOULD BE PRESERVED!!!\nwmostations <- wmostations[-(which(wmostations$wmon %in% c(\"2485\",\"4130\",\"4197\",\"11146\",\"16126\"))),]\nduplicates <- wmostations[which(TRUE==(duplicated(matrix(c(wmostations$lon,wmostations$lat),ncol=2)))),]\nif (dim(duplicates)[1]>0) {\n  for (i in 1:dim(duplicates)[1]) {\n    poistettavat_asemat <- which(wmostations$lon==duplicates$lon[i] & wmostations$lat==duplicates$lat[i])\n    poistettavat_asemat <- poistettavat_asemat[1:(length(poistettavat_asemat)-1)]\n    wmostations <- wmostations[-(poistettavat_asemat),]\n    rm(poistettavat_asemat)\n  }\n  rm(i)\n}\nrm(duplicates)\n\n### ADDING lsm and z_oro values to conversion list ###\n# OLD MODEL VERSION\n# Land-sea-mask\nland_sea_mask <- read.csv(\"../database_tables/mos/previ_ecmos_narrow_v_distinct_land_sea_mask_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nland_sea_mask$station_id <- as.integer(land_sea_mask$station_id)\nwmostations <- cbind(wmostations,as.data.frame(matrix(NA,dim(wmostations)[1])))\nnames(wmostations)[dim(wmostations)[2]] <- \"lsm\"\nwmostations$lsm <- land_sea_mask$value[match(wmostations$wmon,land_sea_mask$station_id)]\nrm(land_sea_mask)\n# Model orography\nmodel_elevation <- read.csv(\"../database_tables/mos/previ_ecmos_narrow_v_distinct_z_oro_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nmodel_elevation$station_id <- as.integer(model_elevation$station_id)\n# model Z must be divided by 9.81, also rounding.\nmodel_elevation$value <- round((model_elevation$value / 9.81),digits=2)\nwmostations <- cbind(wmostations,as.data.frame(matrix(NA,dim(wmostations)[1])))\nnames(wmostations)[dim(wmostations)[2]] <- \"z_oro\"\nwmostations$z_oro <- model_elevation$value[match(wmostations$wmon,model_elevation$station_id)]\nrm(model_elevation)\n\n# NEW MODEL VERSION\n# Land-sea-mask\nland_sea_mask <- read.csv(\"../database_tables/mos/previ_ecmos_narrow_v_distinct_land_sea_mask_41r2_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nland_sea_mask$station_id <- as.integer(land_sea_mask$station_id)\nwmostations <- cbind(wmostations,as.data.frame(matrix(NA,dim(wmostations)[1])))\nnames(wmostations)[dim(wmostations)[2]] <- \"lsm_41r2\"\nwmostations$lsm_41r2 <- land_sea_mask$value[match(wmostations$wmon,land_sea_mask$station_id)]\nrm(land_sea_mask)\n# Model orography\nmodel_elevation <- read.csv(\"../database_tables/mos/previ_ecmos_narrow_v_distinct_z_oro_41r2_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nmodel_elevation$station_id <- as.integer(model_elevation$station_id)\n# model Z must be divided by 9.81, also rounding.\nmodel_elevation$value <- round((model_elevation$value / 9.81),digits=2)\nwmostations <- cbind(wmostations,as.data.frame(matrix(NA,dim(wmostations)[1])))\nnames(wmostations)[dim(wmostations)[2]] <- \"z_oro_41r2\"\nwmostations$z_oro_41r2 <- model_elevation$value[match(wmostations$wmon,model_elevation$station_id)]\nrm(model_elevation)\n\n### Adding LPNN numbers to finnish stations ###\n# THIS FILE IS CURRENTLY (03/2017) UPDATED BY HAND BY RETRIEVING IT FROM CLDB TABLE network_members_v1 (instructions in file statcal/R_projects/constant_lists/database_tables/CLDB/CLDB_hakuja.txt on how to make various retrievals)\nstation_LPNN <- read.csv(\"../database_tables/CLDB/network_members_v1_nykyiset.txt\")\nstation_LPNN$FMISID <- as.integer(station_LPNN$FMISID)\nstation_LPNN$LPNN <- as.integer(station_LPNN$LPNN)\nstation_LPNN$WMON <- as.integer(station_LPNN$WMON)\n# All current station numbers are unique\n# sum(duplicated(station_LPNN$FMISID))\n# Filling up LPNN numbers to station list\nwmostations <- cbind(wmostations,as.data.frame(matrix(NA,dim(wmostations)[1])))\nnames(wmostations)[dim(wmostations)[2]] <- \"lpnn\"\nlines_target <- match(station_LPNN$WMON,wmostations$wmon)\nlines_source <- which(!is.na(lines_target))\nlines_target <- na.omit(lines_target)\nwmostations$lpnn[lines_target] <- station_LPNN$LPNN[lines_source]\nrm(lines_source)\nrm(lines_target)\nrm(station_LPNN)\n\n# DEFINING EUROPE, lat 25...90, lon -25...40\nEurope_stations <- wmostations[which(TRUE==((wmostations$lat > 25) & (wmostations$lat < 90) & (wmostations$lon > -25) & (wmostations$lon < 40))),]\n# Removing missing values (these are needed in several parts of the analysis)\nEurope_stations <- Europe_stations[which(rowSums(is.na(Europe_stations[,c(\"h\",\"lsm\",\"z_oro\",\"lsm_41r2\",\"z_oro_41r2\",\"lon\",\"lat\")]))==0),]\n\n# DEFINING FINLAND, wmon > 2700 and wmon < 3000\nFinland_stations <- subset(wmostations, wmon >= 2700 & wmon <=3000)\n# Removing missing values (these are needed in several parts of the analysis)\nFinland_stations <- Finland_stations[which(rowSums(is.na(Finland_stations[,c(\"h\",\"lsm\",\"z_oro\",\"lsm_41r2\",\"z_oro_41r2\",\"lon\",\"lat\")]))==0),]\n\n\n### SAVING CROPPED WMON-FMISID-LPNN CONVERSION TABLE\nwrite.csv(wmostations,\"../station_lists/mos_stations_homogeneous_with_metadata_global.csv\", row.names = FALSE, quote = TRUE)\nwrite.csv(Europe_stations,\"../station_lists/mos_stations_homogeneous_with_metadata_Europe.csv\", row.names = FALSE, quote = TRUE)\nwrite.csv(Finland_stations,\"../station_lists/mos_stations_homogeneous_with_metadata_Finland.csv\", row.names = FALSE, quote = TRUE)\n\n# Based on this list which was sent earlier to STU, mos forecasts are interpolated to station locations\noriginal_interpolation_list <- read.csv(\"../station_lists/ECMWF_interpolation_station_list_Europe_v2.csv\")\n# 93 WMO numbers can be found in original_interpolation_list but not in \"new\" list (160117)\nmatching_list <- Europe_stations[match(original_interpolation_list$station_id,Europe_stations$wmon),]\noriginal_interpolation_list[(which(is.na(matching_list$wmon))),]\n# All stations in new list can also be found in the original list\nrm(matching_list)\nmatching_list <- original_interpolation_list[match(Europe_stations$wmon,original_interpolation_list$station_id),]\nEurope_stations[(which(is.na(matching_list$station_id))),]\nrm(original_interpolation_list)\nrm(matching_list)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### PLOTTING STATION LISTS (THOSE THAT ARE DEFINED IN THIS SCRIPT) ### (PLOTTING ROUTINE located currently in first_functions.R)\n\n### ALL HOMOGENOUS WMOSTATIONS ###\n# GLOBAL\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_global.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,wmostations$lon,wmostations$lat))\nplotting_title <- paste(\"homogeneous stations available for training, 2011-12-01 - \",Sys.Date(),\"\\nstations over area\",dim(wmostations)[1],\"/\",dim(wmostations)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 0.5, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# EUROPE\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations$lon,Europe_stations$lat))\nplotting_title <- paste(\"homogeneous stations available for training, 2011-12-01 - \",Sys.Date(),\"\\nstations over area\",dim(Europe_stations)[1],\"/\",dim(wmostations)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 0.5, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# FINLAND\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_Finland.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Finland_stations$lon,Finland_stations$lat))\nplotting_title <- paste(\"homogeneous stations available for training, 2011-12-01 - \",Sys.Date(),\"\\nstations over area\",dim(Finland_stations)[1],\"/\",dim(wmostations)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 0.5, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n\n### PLOTTING METADATA FOR EUROPEAN STATIONS ###\n### OLD MODEL VERSION\n### OROGRAPHY DIFFERENCE (station elevation - grid_box elevation) \ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_orography_difference_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind((Europe_stations$z_oro-Europe_stations$h),Europe_stations$lon,Europe_stations$lat))\nbreaks <- c( -2000, -500, -300, -200, -100, 100, 200, 300, 500, 2000)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"RdBu\", point_size = 0.7, plotting_title = \"orography difference (grid-box height - station elevation) for mos stations, 41r1\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n### LAND-SEA MASK\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_land_sea_mask_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(Europe_stations$lsm,Europe_stations$lon,Europe_stations$lat))\nbreaks <- seq(0,100,10)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"PuRd\", point_size = 0.7, plotting_title = \"land-sea mask for mos stations, 41r1\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n### NEW MODEL VERSION ###\n### OROGRAPHY DIFFERENCE (station elevation - grid_box elevation) \ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_orography_difference_Europe_41r2.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind((Europe_stations$z_oro_41r2-Europe_stations$h),Europe_stations$lon,Europe_stations$lat))\nbreaks <- c( -2000, -500, -300, -200, -100, 100, 200, 300, 500, 2000)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"RdBu\", point_size = 0.7, plotting_title = \"orography difference (grid-box height - station elevation) for mos stations, 41r2\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n### LAND-SEA MASK\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_land_sea_mask_Europe_41r2.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(Europe_stations$lsm_41r2,Europe_stations$lon,Europe_stations$lat))\nbreaks <- seq(0,100,10)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"PuRd\", point_size = 0.7, plotting_title = \"land-sea mask for mos stations, 41r2\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n### NEW MODEL VERSION - OLD MODEL VERSION ###\n### OROGRAPHY DIFFERENCE\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_orography_difference_Europe_41r2_to_41r1.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind((Europe_stations$z_oro_41r2-Europe_stations$z_oro),Europe_stations$lon,Europe_stations$lat))\nbreaks <- c( -200, -50, -30, -20, -10, 10, 20, 30, 50, 200)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"RdBu\", point_size = 0.7, plotting_title = \"orography difference (grid-box height - station elevation) for mos stations, (41r2 - 41r1)\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n### LAND-SEA MASK DIFFERENCE\ncom_string <- paste(\"png(\\\"\",plot_dir,\"mos_stations_homogeneous_with_metadata_land_sea_mask_difference_Europe_41r2_to_41r1.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind((Europe_stations$lsm_41r2-Europe_stations$lsm),Europe_stations$lon,Europe_stations$lat))\nbreaks <- seq(-80,80,20)\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = breaks, colorscale = \"RdBu\", point_size = 0.7, plotting_title = \"land-sea mask difference for mos stations, (41r2 - 41r1)\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(breaks)\nrm(tplot)\n\n### ADDITIONAL STATION LISTS (CONDITIONAL SUBSETS) ###\n# \"mountaneous coastline\"\nEurope_stations2 <- Europe_stations[which(TRUE==((abs(Europe_stations$z_oro-Europe_stations$h) > 150) & (Europe_stations$lsm < 50))),]\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_mountaneous_coastline_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations2$lon,Europe_stations2$lat))\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = as.data.frame(cbind(1,Europe_stations$lon,Europe_stations$lat)), breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = \"station_list mountaneous coastline\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(tplot)\nwrite.csv(Europe_stations2,\"../station_lists/station_list_mountaneous_coastline_Europe.csv\", row.names = FALSE, quote = TRUE)\n# \"flat inland\"\nEurope_stations3 <- Europe_stations[which(TRUE==((Europe_stations$h > 50) & (abs(Europe_stations$z_oro-Europe_stations$h) < 0.8) & (Europe_stations$lsm == 100))),]\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_flat_inland_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations3$lon,Europe_stations3$lat))\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = as.data.frame(cbind(1,Europe_stations$lon,Europe_stations$lat)), breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = \"station_list flat inland\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(tplot)\nwrite.csv(Europe_stations3,\"../station_lists/station_list_flat_inland_Europe.csv\", row.names = FALSE, quote = TRUE)\n# \"Mountaneous coastline AND flat inland\"\nEurope_stations4 <- rbind(Europe_stations3,Europe_stations2)\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_mountaneous_coastline_and_flat_inland_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations4$lon,Europe_stations4$lat))\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = as.data.frame(cbind(1,Europe_stations$lon,Europe_stations$lat)), breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = \"station_list mountaneous coastline and flat inland\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(tplot)\nwrite.csv(Europe_stations4,\"../station_lists/station_list_mountaneous_coastline_and_flat_inland_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(Europe_stations2)\nrm(Europe_stations3)\nrm(Europe_stations4)\n# All inland stations (lsm==100)\nEurope_stations2 <- Europe_stations[which(TRUE==(Europe_stations$lsm == 100)),]\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_all_inland_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations2$lon,Europe_stations2$lat))\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = as.data.frame(cbind(1,Europe_stations$lon,Europe_stations$lat)), breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = \"station_list all inland\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(tplot)\nwrite.csv(Europe_stations2,\"../station_lists/station_list_all_inland_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(Europe_stations2)\n# All coastal stations (lsm<100)\nEurope_stations2 <- Europe_stations[which(TRUE==(Europe_stations$lsm < 100)),]\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_all_coastal_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations2$lon,Europe_stations2$lat))\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = as.data.frame(cbind(1,Europe_stations$lon,Europe_stations$lat)), breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = \"station_list all coastal\")\nprint(tplot)\ndev.off()\nrm(plot_data)\nrm(tplot)\nwrite.csv(Europe_stations2,\"../station_lists/station_list_all_coastal_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(Europe_stations2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# PLOTTING OBSERVATION STATIONS THAT WERE MANUALLY UPDATED FROM ECMWF\nstations_ECMWF <- read.csv(\"../database_tables/CLDB_linked_to_MOS/ecmwf_bufr_v_distinct_shortened_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\n# Comparing coordinates in ECMWF stations to those used in interpolation (wmostations, that is station(_network_mapping)). Leave only those stations that have matching locations.\nmatching_list <- wmostations[match(stations_ECMWF$wmon,wmostations$wmon),]\nstations_ECMWF <- stations_ECMWF[(abs(stations_ECMWF$lon-matching_list$lon)<0.1 & abs(stations_ECMWF$lat-matching_list$lat)<0.1),]\nrm(matching_list)\nstations_ECMWF <- na.omit(stations_ECMWF)\n# Remove duplicate wmo numbers\nfor (i in dim(stations_ECMWF)[1]:2) {\n  if (!is.na(stations_ECMWF$wmon[i])==TRUE & !is.na(stations_ECMWF$wmon[i-1])==TRUE) {\n    if (stations_ECMWF$wmon[i]==stations_ECMWF$wmon[i-1]) {\n      # print(i)\n      stations_ECMWF[i,] <- NA\n    }\n  }\n}\nrm(i)\nstations_ECMWF <- na.omit(stations_ECMWF)\n# # All stations now have a unique wmo number.\n# unique_stations <- unique(matrix(c(stations_ECMWF$wmon),ncol=1))\n# dim(unique_stations)[1]\n# rm(unique_stations)\n# duplicated_stations <- stations_ECMWF[duplicated(stations_ECMWF$wmon),]\n# dim(duplicated_stations)[1]\n# rm(duplicated_stations)\n# unique_stations <- unique(matrix(c(wmostations$wmon),ncol=1))\n# dim(unique_stations)[1]\n# rm(unique_stations)\n# duplicated_stations <- wmostations[duplicated(wmostations$wmon),]\n# dim(duplicated_stations)[1]\n# rm(duplicated_stations)\n# PLOTTING\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_ecmwf_bufr_v_homogeneous_global.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,stations_ECMWF$lon,stations_ECMWF$lat))\nplotting_title <- paste(\"stations from ECMWF with matching locations\\nstations over area\",dim(stations_ECMWF)[1],\"/\",dim(stations_ECMWF)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 0.5, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# SAVING\nwrite.csv(stations_ECMWF,\"../station_lists/station_list_ecmwf_bufr_v_homogeneous_global.csv\", row.names = FALSE, quote = TRUE)\n\n# EUROPE\nEurope_stations_ECMWF <- stations_ECMWF[which(TRUE==((stations_ECMWF$lat > 25) & (stations_ECMWF$lat < 90) & (stations_ECMWF$lon > -25) & (stations_ECMWF$lon < 40))),]\n# Comparing coordinates in ECMWF stations to those used in interpolation (wmostations, that is station(_network_mapping)). Leave only those stations that have matching locations.\n# Use a slightly tighter location constraint of 0.05 to European stations\nmatching_list <- wmostations[match(Europe_stations_ECMWF$wmon,wmostations$wmon),]\nEurope_stations_ECMWF <- Europe_stations_ECMWF[(abs(Europe_stations_ECMWF$lon-matching_list$lon)<0.05 & abs(Europe_stations_ECMWF$lat-matching_list$lat)<0.05),]\nrm(matching_list)\nEurope_stations_ECMWF <- na.omit(Europe_stations_ECMWF)\n# Remove duplicate wmo numbers\nfor (i in dim(Europe_stations_ECMWF)[1]:2) {\n  if (!is.na(Europe_stations_ECMWF$wmon[i])==TRUE & !is.na(Europe_stations_ECMWF$wmon[i-1])==TRUE) {\n    if (Europe_stations_ECMWF$wmon[i]==Europe_stations_ECMWF$wmon[i-1]) {\n      # print(i)\n      Europe_stations_ECMWF[i,] <- NA\n    }\n  }\n}\nrm(i)\nEurope_stations_ECMWF <- na.omit(Europe_stations_ECMWF)\n# # All stations now have a unique wmo number\n# unique_stations <- unique(matrix(c(Europe_stations_ECMWF$wmon),ncol=1))\n# dim(unique_stations)[1]\n# rm(unique_stations)\n# duplicated_stations <- Europe_stations_ECMWF[duplicated(Europe_stations_ECMWF$wmon),]\n# dim(duplicated_stations)[1]\n# rm(duplicated_stations)\n# PLOTTING\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_ecmwf_bufr_v_homogeneous_Europe.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,Europe_stations_ECMWF$lon,Europe_stations_ECMWF$lat))\nplotting_title <- paste(\"stations from ECMWF with matching locations\\nstations over area\",dim(Europe_stations_ECMWF)[1],\"/\",dim(Europe_stations_ECMWF)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 0.5, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# SAVING\nwrite.csv(Europe_stations_ECMWF,\"../station_lists/station_list_ecmwf_bufr_v_homogeneous_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(Europe_stations_ECMWF)\nrm(stations_ECMWF)\nrm(mos_stations)\nrm(wmostations)\nrm(Europe_stations)\nrm(Finland_stations)\n\n# THESE FOREIGN STATION LISTS ARE BASED ON LEGACY SCRIPTS AND ARE HERE TAKEN AS \"GIVEN\". DEFINITION OF THEM IS IN LEGACY SCRIPTS.\n# A PORTION OF IT THEM IS RANDOMLY SELECTED, SO EXACT REPLICATION OF THEM IS NOT POSSIBLE EITHER.\n# 1) 226 stations outside MOS points, which are as evenly as possible divided among their variable c(elevation, distance_to_nearest_mos_point) c([0,1000],[0,100]).\n# In addition to these equally divided stations, also stations being conditional on only either are also in this station list.\nstation_list_non_mos_stations_all <- read.csv(\"../station_lists/station_list_non_mos_stations_all.csv\",header=TRUE,stringsAsFactors = FALSE)\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_non_mos_stations_all.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,station_list_non_mos_stations_all$Longitude,station_list_non_mos_stations_all$Latitude))\nplotting_title <- paste(\"stations outside MOS points\\nstations over area\",dim(station_list_non_mos_stations_all)[1],\"/\",dim(station_list_non_mos_stations_all)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# 2) These MOS points are withheld from gridding under constraints (distance to nearest other MOS point < 10 km, elevation difference to it < 30 m)\nstation_list_withheld_mos_points_from_gridding <- read.csv(\"../station_lists/station_list_withheld_mos_points_from_gridding.csv\",header = TRUE,stringsAsFactors = FALSE)\ncom_string <- paste(\"png(\\\"\",plot_dir,\"station_list_withheld_mos_points_from_gridding.png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\neval(parse(text=com_string))\nrm(com_string)\nplot_data <- as.data.frame(cbind(0,station_list_withheld_mos_points_from_gridding$lon,station_list_withheld_mos_points_from_gridding$lat))\nplotting_title <- paste(\"withheld MOS points from gridding\\nstations over area\",dim(station_list_withheld_mos_points_from_gridding)[1],\"/\",dim(station_list_withheld_mos_points_from_gridding)[1],\"\",sep=\" \")\ntplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = plotting_title)\nprint(tplot)\ndev.off()\nrm(plotting_title)\nrm(plot_data)\nrm(tplot)\n# 3) These 140 stations are \"mountaneous\" stations, with elevation > 1500m. Some of them are MOS points, some of them not. All stations outside MOS points have elevation > 2000m.\nstation_list_mountain_stations_global <- read.csv(\"../station_lists/station_list_mountain_stations_global.csv\",header = TRUE,stringsAsFactors = FALSE)\nrm(station_list_non_mos_stations_all)\nrm(station_list_withheld_mos_points_from_gridding)\nrm(station_list_mountain_stations_global)\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### This creates the combined station list numberings that can be read in in the main program #####\n##### All the station lists are put in R list type variable and saved\n### THE LOCATION POINTS OF SOME OF THESE LISTS ARE BASED ON MOS POINTS, WHEREAS OTHERS ARE BASED ON \"REAL-TIME\" wmostations LIST OR FLATFILE WHEN THE STATION LISTS WERE DEFINED\n### FROZEN MOS POINTS HAVE ONLY WMON NUMBER TO THEM\n\n## THESE LISTS HAVE BEEN DEFINED EARLIER AND ARE INREAD FROM EXISTING FILES\n## Based on frozen MOS station list:\n# mos_stations_homogeneous_with_metadata_global\n# mos_stations_homogeneous_with_metadata_Europe\n# mos_stations_homogeneous_with_metadata_Finland\n# all coastal Europe\n# mountaneous coastline Europe\n# all inland Europe\n# flat inland Europe\n# withheld MOS-points from gridding\n## Based on previously defined station lists:\n# non_mos_stations all\n# mountain stations global\n## Based on real-time station lists and should be updated:\n# all stations realtime\n# all stations realtime_Europe\n# all FMI stations in verif database\n# road weather stations in verif database\n# finnish coastalstations in verif database\n# sea stations in verif database\n# sea stations for wind in verif database\n# inland stations (temperature) in verif database\n# inland stations (cloud) in verif database\n# inland stations (wind speed) in verif database\n# all rain gauge stations in verif database\n# seeps rain gauge stations in verif database\n# fells (tunturit) in verif database\n# airports in verif database\n# foreign stations in verif database\n# newspaperstations in verif database\n\n## THESE LISTS ARE DEFINED BELOW AND SAVED AFTER. THEY ARE NOT READ IN FROM PREVIOUSLY DEFINED STATION LISTS. LOCATIONS ARE BASED TO A REALTIME STATION LIST\n# Mountain stations Europe\n# newspaperstations_Europe\n# Finnish stations 1 (\"control points\" of meteorologists)\n# Finnish stations 2 (stations with dwd_mosmix forecasts available)\n# Finnish stations 3 (arbitrary list of stations throughout Finland)\n# Finnish stations 4 (alea iacta est -stations: Hki-Vantaa, Tampere Pirkkala, Sodankylä)\n# Finnish airports\n\n# mos_stations_homogeneous_with_metadata_global\nloaded_list <- read.csv(\"../station_lists/mos_stations_homogeneous_with_metadata_global.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- list(loaded_list$wmon)\nnames(all_station_lists)[1] <- \"mos_stations_homogeneous_global\"\nrm(loaded_list)\n# mos_stations_homogeneous_with_metadata_Europe, lat 25...90, lon -25...40\nloaded_list <- read.csv(\"../station_lists/mos_stations_homogeneous_with_metadata_Europe.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"mos_stations_homogeneous_Europe\")\nrm(loaded_list)\n# mos_stations_homogeneous_with_metadata_Finland\nloaded_list <- read.csv(\"../station_lists/mos_stations_homogeneous_with_metadata_Finland.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"mos_stations_homogeneous_Finland\")\nrm(loaded_list)\n# all_coastal_Europe\nloaded_list <- read.csv(\"../station_lists/station_list_all_coastal_Europe.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"all_coastal_Europe\")\nrm(loaded_list)\n# mountaneous_coastline_Europe\nloaded_list <- read.csv(\"../station_lists/station_list_mountaneous_coastline_Europe.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"mountaneous_coastline_Europe\")\nrm(loaded_list)\n# all_inland_Europe\nloaded_list <- read.csv(\"../station_lists/station_list_all_inland_Europe.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"all_inland_Europe\")\nrm(loaded_list)\n# flat_inland_Europe\nloaded_list <- read.csv(\"../station_lists/station_list_flat_inland_Europe.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"flat_inland_Europe\")\nrm(loaded_list)\n# withheld_mos_points_from_gridding\nloaded_list <- read.csv(\"../station_lists/station_list_withheld_mos_points_from_gridding.csv\", header=TRUE, stringsAsFactors = FALSE)\nall_station_lists <- lappend(all_station_lists,loaded_list$wmon,\"withheld_mos_points_from_gridding\")\nrm(loaded_list)\n# non_mos_stations_all\nloaded_list <- read.csv(\"../station_lists/station_list_non_mos_stations_all.csv\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- loaded_list[,c(\"IndexNbr\",\"Longitude\",\"Latitude\",\"Hha\",\"min_distance\")]\nall_station_lists <- lappend(all_station_lists,added_data,\"non_mos_stations_all\")\nrm(loaded_list)\nrm(added_data)\n# mountain_stations_global and mountain_stations_Europe (this is saved)\nloaded_list <- read.csv(\"../station_lists/station_list_mountain_stations_global.csv\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- loaded_list[,c(\"IndexNbr\",\"Longitude\",\"Latitude\",\"Hha\")]\nall_station_lists <- lappend(all_station_lists,added_data,\"mountain_stations_global\")\nadded_data <- added_data[which(TRUE==((added_data$Latitude > 25) & (added_data$Latitude < 90) & (added_data$Longitude > -25) & (added_data$Longitude < 40))),]\nall_station_lists <- lappend(all_station_lists,added_data,\"mountain_stations_Europe\")\nwrite.csv(added_data,\"../station_lists/station_list_mountain_stations_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# all_stations_realtime\nloaded_list <- read.csv(\"../station_lists/all_stations_realtime.csv\",header = TRUE,stringsAsFactors = FALSE)\nadded_data <- loaded_list[,c(\"station_id\",\"lon\",\"lat\",\"h\")]\nall_station_lists <- lappend(all_station_lists,added_data,\"all_stations_realtime\")\nrm(loaded_list)\nrm(added_data)\n# all_stations_realtime_Europe\nloaded_list <- read.csv(\"../station_lists/all_stations_realtime_Europe.csv\",header = TRUE,stringsAsFactors = FALSE)\nadded_data <- loaded_list[,c(\"station_id\",\"lon\",\"lat\",\"h\")]\nall_station_lists <- lappend(all_station_lists,added_data,\"all_stations_realtime_Europe\")\nrm(loaded_list)\nrm(added_data)\n\n# Loading history table based on which fmisid-wmon conversion and the related location is defined. Removing all duplicate wmo numbers (preserving only the first (latest) station location)\nwmostations <- read.csv(\"../database_tables/CLDB_linked_to_MOS/wmostations_distinct_realtime_shortened_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nwmostations <- wmostations[!duplicated(wmostations$wmon),]\n\n# Finnish stations 1 (\"control points\" of meteorologists)\n# (Jomala Jomalaby, Hanko Tulliniemi, Helsinki Kaisaniemi, Vantaa Helsinki-Vantaan lentoasema, Turku Artukainen, Jokioinen Jokioisten observatorio, Kotka Rankki, Pori Tahkoluoto, Pirkkala Tampere-Pirkkala lentoasema, Lahti Laune, Kouvola Utti lentoasema, Lappeenranta lentoasema, Vaasa Klemettilä, Ähtäri Myllymäki, Jyväskylä lentoasema, Mikkeli lentoasema, Savonlinna lentoasema, Kokkola Tankar, Ylivieska lentokenttä, Viitasaari Haapaniemi, Siilinjärvi Kuopio lentoasema, Liperi Joensuu lentoasema, Ilomantsi Mekrijärvi, Oulu Oulunsalo Pellonpää, Kajaani lentoasema, Kuhmo Kalliojoki, Tornio Torppi, Pudasjärvi lentokenttä, Kuusamo lentoasema, Pello kk museotie, Rovaniemi lentoasema, Salla kk Myllytie, Muonio Alamuonio, Kittilä Pokka, Sodankylä Lapin ilmatieteellinen tutkimuskeskus, Salla Värriötunturi, Enontekiö Kilpisjärvi kyläkeskus, Utsjoki Kevo, Inari Ivalo lentoasema)\nadded_data <- sort(unique(wmostations$wmon[(match(c(2741,2746,2978,2974,2773,2963,2976,2751,2944,2965,2966,2958,2957,2924,2935,2947,2948,2721,2755,2915,2917,2929,2939,2851,2897,2799,2880,2866,2869,2844,2845,2849,2823,2717,2836,2819,2801,2805,2807),wmostations$wmon))]))\nadded_data <- (wmostations[match(added_data,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_stations_control_points\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_stations_control_points.csv\", row.names = FALSE, quote = TRUE)\nrm(added_data)\n# Finnish stations 2 (stations with dwd_mosmix forecasts available)\nadded_data <- sort(unique(wmostations$wmon[(match(c(2752,2807,2810,2830,2836,2847,2869,2876,2911,2912,2915,2917,2929,2935,2944,2947,2948,2952,2958,2965,2966,2970,2972,2974,2975,2982),wmostations$wmon))]))\nadded_data <- (wmostations[match(added_data,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_stations_with_dwdmosmix\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_stations_with_dwdmosmix.csv\", row.names = FALSE, quote = TRUE)\nrm(added_data)\n# Finnish stations 3 (arbitrary list of stations throughout Finland)\n# (Kumpula, Jyväskylä, Sodankylä, Jomala, Lappeenranta, Kuopio, Liperi, Rovaniemi, Oulu, Vaasa, Inari, Salla, Hyytiälä, Turku, Kauhajoki, Enontekiö, Kokkola, Suomussalmi, Vieremä)\nadded_data <- sort(unique(wmostations$wmon[(match(c(2998,2935,2836,2741,2958,2917,2929,2845,2851,2957,2807,2819,2770,2773,2769,2801,2721,2889,2834),wmostations$wmon))]))\nadded_data <- (wmostations[match(added_data,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_stations_arbitrary\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_stations_arbitrary.csv\", row.names = FALSE, quote = TRUE)\nrm(added_data)\n# Finnish stations 4 (alea iacta est -stations: Hki-Vantaa, Tampere Pirkkala, Sodankylä)\nadded_data <- sort(unique(wmostations$wmon[(match(c(2974,2944,2836),wmostations$wmon))]))\nadded_data <- (wmostations[match(added_data,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_stations_alea_iacta_est\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_stations_alea_iacta_est.csv\", row.names = FALSE, quote = TRUE)\nrm(added_data)\n# Finnish airports (hopefully these are all...)\nadded_data <- wmostations[grep(\"lento\",wmostations$station_name),]\nadded_data <- added_data[-(dim(added_data)[1]),]\nadded_data <- sort(unique(added_data$wmon))\nadded_data <- (wmostations[match(added_data,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_airports\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_airports.csv\", row.names = FALSE, quote = TRUE)\nrm(added_data)\n\n# all FMI stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/allFMIstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"allFMIstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_allFMIstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# road weather stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/roadweatherstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"roadweatherstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_roadweatherstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# finnish coastalstations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/coastalstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"Finnish_coastalstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_Finnish_coastalstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# sea stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/seastations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"seastations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_seastations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# sea stations for wind in verif database (remove the first digit 8 (see Matias' email 20.3.2017))\nloaded_list <- read.csv(\"../database_tables/verif/seastationsforwind_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nloaded_list <- as.integer(apply(loaded_list, 2, (function(x) substring(x,2))))\nadded_data <- (wmostations[match(loaded_list,wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"seastationsforwind_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_seastationsforwind_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# inland stations (temperature) in verif database\nloaded_list <- read.csv(\"../database_tables/verif/inlandTstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"inlandTstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_inlandTstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# inland stations (cloud) in verif database\nloaded_list <- read.csv(\"../database_tables/verif/inlandNstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"inlandNstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_inlandNstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# inland stations (wind speed) in verif database\nloaded_list <- read.csv(\"../database_tables/verif/inlandVstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"inlandVstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_inlandVstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# all rain gauge stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/allraingaugestations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"allraingaugestations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_allraingaugestations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# seeps rain gauge stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/seepsraingaugestations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"seepsraingaugestations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_seepsraingaugestations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# fells (tunturit) in verif database\nloaded_list <- read.csv(\"../database_tables/verif/fells_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"fells_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_fells_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# airports in verif database\nloaded_list <- read.csv(\"../database_tables/verif/airports_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$wmon),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"airports_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_airports_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# foreign stations in verif database\nloaded_list <- read.csv(\"../database_tables/verif/foreignstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list[,1],wmostations$fmisid),])\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"foreignstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_foreignstations_verifdb.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n# newspaperstations (54 out of 318 are not among homogeneous mos stations) and newspaperstations_Europe (this is saved)\nloaded_list <- read.csv(\"../database_tables/verif/newspaperstations_distinct_csv.txt\", header=TRUE, stringsAsFactors = FALSE)\nadded_data <- (wmostations[match(loaded_list$station,wmostations$fmisid),])\nadded_data <- added_data[order(added_data$wmon),]\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"newspaperstations_verifdb\")\nwrite.csv(added_data,\"../station_lists/station_list_newspaperstations.csv\", row.names = FALSE, quote = TRUE)\nadded_data <- added_data[which(TRUE==((added_data$lat > 25) & (added_data$lat < 90) & (added_data$lon > -25) & (added_data$lon < 40))),]\nall_station_lists <- lappend(all_station_lists,added_data[,c(\"wmon\",\"lon\",\"lat\",\"h\")],\"newspaperstations_verifdb_Europe\")\nwrite.csv(added_data,\"../station_lists/station_list_newspaperstations_Europe.csv\", row.names = FALSE, quote = TRUE)\nrm(loaded_list)\nrm(added_data)\n\n\n\n\n\n# SAVING LIST\nsave(all_station_lists, file=\"../station_lists/read_in_station_lists.Rdata\")\n\n# PLOTTING STATION LISTS WHICH HAVE NOT BEEN PLOTTED EARLIER IN THIS SCRIPT\n\n# all FMI stations in verif database\n# road weather stations in verif database\n# finnish coastalstations in verif database\n# sea stations in verif database\n# sea stations for wind in verif database\n# inland stations (temperature) in verif database\n# inland stations (cloud) in verif database\n# inland stations (wind speed) in verif database\n# all rain gauge stations in verif database\n# seeps rain gauge stations in verif database\n# fells (tunturit) in verif database\n# airports in verif database\n# foreign stations in verif database\n# newspaperstations in verif database\n\nstation_lists_to_be_plotted <- c(\"mountain_stations_global\",\"mountain_stations_Europe\",\"Finnish_stations_control_points\",\"Finnish_stations_with_dwdmosmix\",\"Finnish_stations_arbitrary\",\"Finnish_stations_alea_iacta_est\",\"Finnish_airports\",\"allFMIstations_verifdb\",\"roadweatherstations_verifdb\",\"Finnish_coastalstations_verifdb\",\"seastations_verifdb\",\"seastationsforwind_verifdb\",\"inlandTstations_verifdb\",\"inlandNstations_verifdb\",\"inlandVstations_verifdb\",\"allraingaugestations_verifdb\",\"seepsraingaugestations_verifdb\",\"fells_verifdb\",\"airports_verifdb\",\"foreignstations_verifdb\",\"newspaperstations_verifdb\",\"newspaperstations_verifdb_Europe\")\nfor (i in 1:length(station_lists_to_be_plotted)) {\n  com_string <- paste(\"png(\\\"\",plot_dir,\"station_list_\",station_lists_to_be_plotted[i],\".png\\\", width = 9000, height = 5000, units = \\\"px\\\", pointsize = 12, ,res=600)\",sep=\"\")\n  eval(parse(text=com_string))\n  rm(com_string)\n  plot_data <- as.data.frame(wmostations[match(unlist(all_station_lists[[which(names(all_station_lists)==station_lists_to_be_plotted[i])]][1]),wmostations$wmon),c(\"wmon\",\"lon\",\"lat\")])\n  plotting_title <- paste(station_lists_to_be_plotted[i],\"\\nstations over area\",dim(plot_data)[1],\"/\",dim(plot_data)[1],\"\",sep=\" \")\n  tplot <- plot_points_on_map(plot_data = plot_data, plot_data_area = plot_data, breaks = NA, colorscale = \"points\", point_size = 1.3, plotting_title = plotting_title)\n  print(tplot)\n  dev.off()\n  rm(plotting_title)\n  rm(plot_data)\n  rm(tplot)\n}\nrm(i)\nrm(station_lists_to_be_plotted)\nrm(all_station_lists)\nrm(wmostations)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### MOVING AND CREATING VARIABLE LISTS THAT ARE LOADED IN MAIN PROGRAM #####\n\n# These lists are updated from database directly\naviation_parameters <- read.csv(\"../database_tables/aviation/parameter_distinct_csv.txt\",header = TRUE,stringsAsFactors = FALSE)\nwrite.csv(aviation_parameters,\"../variable_lists/aviation_parameters.csv\", row.names = FALSE, quote = TRUE)\nverif_parameters <- read.csv(\"../database_tables/verif/parameters_distinct_csv.txt\",sep=\";\",header = TRUE,stringsAsFactors = FALSE)\nwrite.csv(verif_parameters,\"../variable_lists/verif_parameters.csv\", row.names = FALSE, quote = TRUE)\nCLDB_measurand_id_parameters <- read.csv(\"../database_tables/CLDB_linked_to_MOS/measurand_id_distinct_csv.txt\",sep=\";\",header = TRUE,stringsAsFactors = FALSE)\nwrite.csv(CLDB_measurand_id_parameters,\"../variable_lists/CLDB_measurand_id_parameters.csv\", row.names = FALSE, quote = TRUE)\nCLDB_weather_data_qc_parameters <- read.csv(\"../database_tables/CLDB_linked_to_MOS/weather_data_qc_distinct_parameter_csv.txt\", header = TRUE,stringsAsFactors = FALSE)\nwrite.csv(CLDB_weather_data_qc_parameters,\"../variable_lists/CLDB_weather_data_parameters.csv\", row.names = FALSE, quote = TRUE)\n\n# ECMWF list is updated manually (as _M1 model variables are stored to it)\nECMWF_parameters <- read.csv(\"../variable_lists/ECMWF_variable_names_and_numbers.csv\",header = TRUE,stringsAsFactors = FALSE)\n\n\nall_variable_lists <- list(aviation_parameters)\nnames(all_variable_lists)[1] <- \"aviation\"\nrm(aviation_parameters)\nall_variable_lists <- lappend(all_variable_lists,verif_parameters,\"verif\")\nrm(verif_parameters)\nall_variable_lists <- lappend(all_variable_lists,CLDB_measurand_id_parameters,\"CLDB_measurand_id\")\nrm(CLDB_measurand_id_parameters)\nall_variable_lists <- lappend(all_variable_lists,CLDB_weather_data_qc_parameters,\"CLDB_weather_data_qc\")\nrm(CLDB_weather_data_qc_parameters)\nall_variable_lists <- lappend(all_variable_lists,ECMWF_parameters,\"MOS_previ_ecmos_narrow_v\")\nall_variable_lists <- lappend(all_variable_lists,ECMWF_parameters,\"MOS_mos_trace_v\")\nrm(ECMWF_parameters)\n\n# Create a mapping list for a few estimated parameters in different databases...Variable names are mostly based on CLDB, but modified\nmapping_parameters <- c(\"field_name\",\"TA\",\"TAMINDAILY\",\"TAMAXDAILY\",\"TD\",\"PR_1H\",\"WS\",\"WD\",\"PSEA\")\nforecast_producers <- c(\"aviation\",\"verif\",\"CLDB_measurand_id\",\"CLDB_weather_data_qc\",\"MOS_previ_ecmos_narrow_v\",\"MOS_mos_trace_v\")\nmapping_parameters <- data.frame(matrix(NA, nrow = length(mapping_parameters), ncol = length(forecast_producers),dimnames=list(mapping_parameters,forecast_producers)))\nmapping_parameters[\"field_name\",] <- c(\"id\",\"id\",\"measurand_id\",\"parameter\",\"param_id\",\"source_param_name\")\nmapping_parameters[\"TA\",] <- c(4,1,1,\"TA\",153,\"T-K\")\nmapping_parameters[\"TAMINDAILY\",] <- c(6,14,22,\"TAMIN12H\",692,\"MAXT2M-K\")\nmapping_parameters[\"TAMAXDAILY\",] <- c(5,14,21,\"TAMAX12H\",691,\"MINT2M-K\")\nmapping_parameters[\"TD\",] <- c(10,4,32,\"TD\",162,\"TD-K\")\nmapping_parameters[\"PR_1H\",] <- c(50,5,61,\"PR_1H\",179,\"RR-KGM2\")\nmapping_parameters[\"WS\",] <- c(21,3,41,\"WS\",171,\"U-MS\")\nmapping_parameters[\"WD\",] <- c(20,13,44,\"WD\",174,\"V-MS\")\nmapping_parameters[\"PSEA\",] <- c(1,51,37,\"PSEA\",139,\"P-PA\")\nall_variable_lists <- lappend(all_variable_lists,mapping_parameters,\"mapping_parameters\")\nrm(mapping_parameters)\n\n\nsave(all_variable_lists, file=\"../variable_lists/read_in_variable_lists.Rdata\")\n",
    "created" : 1495101145190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3761951339",
    "id" : "5B5633",
    "lastKnownWriteTime" : 1495457781,
    "last_content_update" : 1495457781,
    "path" : "~/statcal/R_projects/constant_lists/list_generate_scripts/create_and_plot_lists.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}