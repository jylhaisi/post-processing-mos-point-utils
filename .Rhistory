install.packages("roxygen2")
install.packages("devtools")
library(devtools)
load_all()
library(roxygen2)
library(devtools)
load_all()
load_all()
load_all()
load_all()
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
lappend()
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
base::%in%
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
jape <- 1
jape2 <- 1
jape3 <- 1
jape3232 <- 1
poistettavat <- c("jape","jape22")
poistettavat <- c("jape","jape22","jape3","japseas")
exists(poistettavat,envir=slobalenv())
exists(poistettavat,envir=globalenv())
envir=globalenv()
exists(poistettavat,envir=globalenv())
globalenv()
exists("sd",envir=globalenv())
exists("efw",envir=globalenv())
rm(list=jape,envir=globalenv())
poistettavat <- c(jape,ape22,jape3,japseas)
poistettavat <- c("jape","jape22","jape3","japseas")
ifrm <- function(x, env = globalenv())
{
if(exists(x, envir = env))
{
rm(list = x, envir = env)
}
}
ifrm("jsda")
ifrm("jape2")
ifrm(c("jape2","jape222")
)
ifrm(c("jape2","jape222"))
ifrm(c("jape2","jape3"))
rm(list=c("jape2","jape3"))
rm(list=c("jape2","jape3"))
rm(list=c("jape2","jape3"))
tryCatch(rm(list=c("jape2","jape3")))
try(rm(list=c("jape2","jape3")))
try({rm(list=c("jape2","jape3"))})
ls()
exists(ls(),envir=globalenv())
match(ls(),envir=globalenv())
({rm(list=c("jape2","jape3"))})
suppressWarnings({rm(list=c("jape2","jape3"))})
suppressWarnings({rm(list=c("envir","ifrm","jape2","jape3"))})
suppressWarnings({rm(list=poistettavat})
suppressWarnings({rm(list=poistettavat)})
poistettavat
poistettavat <- c("jape3232","sdasd")
suppressWarnings({rm(list=poistettavat)})
poistettavat <- c("poistettavat")
suppressWarnings({rm(list=poistettavat)})
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
a %in% b
a %notin% b
detach("package:MOSpointutils", unload=TRUE)
library("MOSpointutils", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
`%notin%` <- function(x,y) !(x %in% y)
a %notin% b
require(stats)
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
centre(x, "mean")
centre(x, "median")
centre(x, "trimmed")
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
source('~/statcal/R_projects/MOSpointutils/R/functions_useful.R')
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
data.frame(time=1:10) %>% merge(iris, by=NULL)
require(tidyr)
install.packages("tidyr")
require(tidyr)
data.frame(time=1:10) %>% merge(iris, by=NULL)
iris
## Recursively step down into list, removing all such objects
rmNullObs <- function(x) {
x <- Filter(Negate(is.NullOb), x)
lapply(x, function(x) if (is.list(x)) rmNullObs(x) else x)
}
## Recursively step down into list, removing all such objects
rmNullObs <- function(x) {
x <- Filter(Negate(is.NullOb), x)
lapply(x, function(x) if (is.list(x)) rmNullObs(x) else x)
is.NullOb <- function(x) is.null(x) | all(sapply(x, is.null))
}
lll <- list(list(NULL),list(1,2,3),list("a","b","c"))
rmNullObs(lll)
rmNullObs()
rmNullObs --help
rmNullObs()
rmNullObs
is.NullOb <- function(x) is.null(x) | all(sapply(x, is.null))
is.NullOb(lll)
lll
lll[[2]][[3]] <- NULL
is.NullOb(lll[[2]])
(lll[[2]])
lll
lll[[3]][[2]] <- NULL
lll
library(MOSpointutils)
q()
rm(list=ls())
library(MOSpointutils)
library(MOSpointutils)
circular_variable_difference <- function(direction1, direction2, digit_base) {
difference <- direction1 - direction2
difference[difference > (digit_base/2)] <- difference[difference > (digit_base/2)] - digit_base
difference[difference < (-(digit_base/2))] <- digit_base + difference[difference < (-(digit_base/2))]
invisible(difference)
}
circular_variable_difference(350,10,360)
circular_variable_difference <- function(direction1, direction2, digit_base) {
difference <- direction1 - direction2
difference[difference > (digit_base/2)] <- difference[difference > (digit_base/2)] - digit_base
difference[difference < (-(digit_base/2))] <- digit_base + difference[difference < (-(digit_base/2))]
(difference)
}
circular_variable_difference(350,10,360)
circular_variable_difference(10,350,360)
jape <- efwef
jape <- 1212
ajsd - 333
ajsd <- 333
ifrm <- function(x, env = globalenv())
{
if(exists(x, envir = env))
{
rm(list = x, envir = env)
}
}
ifrm(jape)
ifrm("jape")
ifrm("jape")
ifrm(c("ajsd","ddsd"))
ifrm(c("ajsd","ddsd"))
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
library(MOSpointutils)
define_time_series <- function(begin_date=as.POSIXct("2011-12-01 00:00:00 GMT",tz="GMT"),end_date=with_tz(round.POSIXt(Sys.time(),"hours"),tz="GMT"),interval_in_hours=3) {
# First rounding to even hours
begin_date <- lubridate::with_tz(round.POSIXt(begin_date,"hours"),tz="GMT")
end_date <- lubridate::with_tz(round.POSIXt(end_date,"hours"),tz="GMT")
# Rounding timestamps to nearest 3 hour forecast time ({00,03,06,09,12,15,18,21})
begin_date <- begin_date - (as.numeric(format(round.POSIXt(begin_date, c("hours")),'%H'))%%3)*3600
end_date <- end_date - (as.numeric(format(round.POSIXt(end_date, c("hours")),'%H'))%%3)*3600
series <- seq(from=begin_date, to=end_date, by=paste0(interval_in_hours," hour"))
return(series)
}
define_time_series(interval_in_hours = 4)
library(lubridate)
define_time_series(interval_in_hours = 4)
define_time_series(interval_in_hours = 0.4)
begin_date <- lubridate::with_tz(round.POSIXt(begin_date,"hours"),tz="GMT")
end_date <- lubridate::with_tz(round.POSIXt(end_date,"hours"),tz="GMT")
begin_date=as.POSIXct("2011-12-01 00:00:00 GMT",tz="GMT")
begin_date + 50000000
end_date <- begin_date + 50000000
paste0(interval_in_hours," hour")
interval_in_hours=3
paste0(interval_in_hours," hour")
seq(from=begin_date, to=end_date, by=paste0(interval_in_hours," hour"))
seq(from=begin_date, to=end_date, by=paste0("5 minutes")
)
seq(from=begin_date, to=end_date, by=paste0("5 mins"))
seq(from=begin_date, to=end_date, by=paste0("5.2 mins"))
define_time_series <- function(begin_date=as.POSIXct("2011-12-01 00:00:00 GMT",tz="GMT"),end_date=with_tz(round.POSIXt(Sys.time(),"hours"),tz="GMT"),interval_in_hours=3,interval_in_seconds=NA,even_hours=TRUE) {
if (even_hours==TRUE) {
# First rounding to even hours
begin_date <- lubridate::with_tz(round.POSIXt(begin_date,"hours"),tz="GMT")
end_date <- lubridate::with_tz(round.POSIXt(end_date,"hours"),tz="GMT")
}
# # Rounding timestamps to nearest 3 hour forecast time ({00,03,06,09,12,15,18,21})
# begin_date <- begin_date - (as.numeric(format(round.POSIXt(begin_date, c("hours")),'%H'))%%3)*3600
# end_date <- end_date - (as.numeric(format(round.POSIXt(end_date, c("hours")),'%H'))%%3)*3600
if (is.na(interval_in_seconds)) {
series <- seq(from=begin_date, to=end_date, by=paste0(interval_in_hours," hour"))
} else {
series <- seq(from=begin_date, to=end_date, by=paste0(interval_in_seconds," secs"))
}
return(series)
}
begin_date + 50000000
end_date <- begin_date + 50000000
end_date
begin_date
end_date <- begin_date + 500000
end_date
begin_date
define_time_series(begin_date,end_date)
define_time_series(begin_date,end_date,interval_in_seconds=55)
end_date
jape <- define_time_series(begin_date,end_date,interval_in_seconds=55)
jape[9099]
jape <- define_time_series(begin_date,end_date,interval_in_seconds=55,even_hours=FALSE)
jape[9091]
jape <- define_time_series(begin_date,end_date,even_hours=FALSE)
jape
begin_date
end_date
jape <- define_time_series(begin_date,end_date,even_hours=FALSE)
define_time_series(begin_date,end_date,even_hours=FALSE)
define_time_series(begin_date,end_date,even_hours=TRUE)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_hours=1)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_hours=1,interval_in_seconds=2000)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_hours=1,interval_in_seconds=1000)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_hours=1,interval_in_seconds=500)
define_time_series(begin_date,end_date,even_hours=FALSE,interval_in_hours=1,interval_in_seconds=500)
end_date
define_time_series(begin_date,end_date,even_hours=FALSE,interval_in_hours=1,interval_in_seconds=1500)
1500/60
define_time_series(begin_date,end_date,even_hours=FALSE,interval_in_hours=1,interval_in_seconds=1800)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_hours=1,interval_in_seconds=1800)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_seconds=1800)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_seconds=180f)
define_time_series(begin_date,end_date,even_hours=TRUE,interval_in_seconds=180)
testidata <- seq(1,100)
testidata
testidata[50:55] <- NA
(na.locf(testidata,maxgap=6,na.rm=FALSE))
require(zoo)
(na.locf(testidata,maxgap=6,na.rm=FALSE))
plot(na.locf(testidata,maxgap=6,na.rm=FALSE))
plot(na.approx(testidata,maxgap=6,na.rm=FALSE))
plot(na.spline(testidata,maxgap=6,na.rm=FALSE))
plot((testidata,maxgap=6,na.rm=FALSE))
plot(testidata)
testidata[97:100] <- NA
plot(na.spline(testidata,maxgap=6,na.rm=FALSE))
(na.spline(testidata,maxgap=6,na.rm=FALSE))
testidata
(na.locf(testidata,maxgap=6,na.rm=FALSE))
plot(na.locf(testidata,maxgap=6,na.rm=FALSE))
#' @return Interpolated time series of same size as the input data.
interpolate_NA_values <- function(data_to_be_interpolated, interpolation_method, maxgap, na.rm=FALSE, ...) {
if (interpolation_method %!in% c("repeat_previous","linear_interp","spline_interp","no_interp")) {
warning("check obs_interpolation_method! Not interpolating!")
return(data_to_be_interpolated)
}
switch(interpolation_method,
repeat_previous = zoo::na.locf(object=data_to_be_interpolated, ...),
linear_interp = zoo::na.approx(object=data_to_be_interpolated, ...),
spline_interp = zoo::na.spline(object=data_to_be_interpolated, ...),
no_interp = data_to_be_interpolated)
}
plot(interpolate_NA_values("repeat_previous",testidata,maxgap=6,na.rm=FALSE))
library("MOSpointutils", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
plot(interpolate_NA_values("repeat_previous",testidata,maxgap=6,na.rm=FALSE))
a %notin% b
library(RPostgreSQL)
library(car)
library(MASS)
require(mgcv)
library(xlsx)
library(verification)
library(scrapeR)
library(prodlim)
library(insol)
library(abind)
library(insol)
library(ggplot2)
library(reshape)
library(gridExtra)
library(abind)
library(LatticeKrig)
library(maps)
library(mapproj)
library(maptools)
library(RColorBrewer)
library(classInt)
library(gpclib)
library(mapdata)
library(lattice)
library(reshape2)
library(foreach)
library(doParallel)
# packages for different model selection algorithms
library(leaps)   # regsubsets
library(glmnet)  # glmnet
library(pls)     # pcr and plsr
plot(interpolate_NA_values("repeat_previous",testidata,maxgap=6,na.rm=FALSE))
### Loading needed libraries ###
# Libraries for data retrieval and handling
library(RPostgreSQL)
library(ROracle)
library(xlsx)
library(scrapeR)
library(abind)
library(reshape)
library(reshape2)
library(zoo)
library(pryr)
library(operator.tools)
library(stringr)
library(dplyr)
library(tidyr)
# Graphical packages
library(ggplot2)
library(gridExtra)
library(lattice)
library(LatticeKrig)
library(maps)
library(mapproj)
library(maptools)
library(mapdata)
library(RColorBrewer)
library(gpclib)
# Statistical packages and different model selection algorithms
library(mgcv)
library(verification)
library(MASS)
library(prodlim)
library(car)
library(leaps)   # regsubsets
library(glmnet)  # glmnet
library(pls)     # pcr and plsr
# Other
library(insol)
library(classInt)
library(lubridate)
library(smooth)
library(pryr)
# library(Hmisc)
# User defined data analysis and plotting functions
library(MOSpointutils)
plot(interpolate_NA_values("repeat_previous",testidata,maxgap=6,na.rm=FALSE))
%!in%
notin()
operator.tools::`%!in%`()
operator.tools::`%!in%`
operator.tools::`%!in%`
interpolation_method <- repeat_previous
interpolation_method <- "repeat_previous"
interpolation_method %notin% c("repeat_previous","linear_interp","spline_interp","no_interp")
operator.tools::`%!in%`()
operator.tools::`%!in%`
operator.tools::fun2name()
operator.tools::fun2name
`%notin%` <- function(x,y) !x %in% y
interpolation_method %notin% c("repeat_previous","linear_interp","spline_interp","no_interp")
interpolation_method %in% c("repeat_previous","linear_interp","spline_interp","no_interp")
testidata[97:100] <- NA
testidata[50:55] <- NA
testidata <- seq(1,100)
rm(list=ls())
q()
`%notin%` <- function(x,y) !x %in% y
testidata <- seq(1,100)
testidata[50:55] <- NA
testidata[97:100] <- NA
interpolation_method %notin% c("repeat_previous","linear_interp","spline_interp","no_interp")
interpolation_method <- "repeat_previous"
interpolation_method %notin% c("repeat_previous","linear_interp","spline_interp","no_interp")
MOSpointutils::`%notin%`interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp")
MOSpointutils::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
library(MOSpointutils)
MOSpointutils::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
library("operator.tools", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.3")
operator.tools::`!in%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`%%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`notin`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::notin(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`%!in%`()
operator.tools::`%!in%`
operator.tools::`%!in%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
MOSpointutils::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
showMethods("%!in%")
%!in%"
%!in%
´%!in%´
`%!in%`
library(MOSpointutils)
MOSpointutils::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
library(MOSpointutils)
operator.tools::`%!in%`()
operator.tools::`%!in%`
library(MOSpointutils)
MOSpointutils::`%notin%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
operator.tools::`%!in%`(interpolation_method, c("repeat_previous","linear_interp","spline_interp","no_interp"))
library(MOSpointutils)
testidata
plot(testidata)
plot(na.locf(testidata,maxgap=6,na.rm=FALSE))
require(zoo)
plot(na.locf(testidata,maxgap=6,na.rm=FALSE))
plot(interpolate_NA_values("repeat_previous",testidata,maxgap=6,na.rm=FALSE))
plot(interpolate_NA_values(testidata,"repeat_previous",maxgap=6,na.rm=FALSE))
length(interpolate_NA_values(testidata,"repeat_previous",maxgap=6,na.rm=FALSE))
plot(interpolate_NA_values(testidata,"linear_interp",maxgap=6,na.rm=FALSE))
plot(interpolate_NA_values(testidata,"spline_interp",maxgap=6,na.rm=FALSE))
plot(interpolate_NA_values(testidata,"no_interp",maxgap=6,na.rm=FALSE))
length(interpolate_NA_values(testidata,"no_interp",maxgap=6,na.rm=FALSE))
testidata[90:100] <- NA
length(interpolate_NA_values(testidata,"no_interp",maxgap=6,na.rm=FALSE))
testidata
testidata[20:30] <- NA
length(interpolate_NA_values(testidata,"no_interp",maxgap=6,na.rm=FALSE))
(interpolate_NA_values(testidata,"no_interp",maxgap=6,na.rm=FALSE))
(interpolate_NA_values(testidata,"linear_interp",maxgap=6,na.rm=FALSE))
(interpolate_NA_values(testidata,"repeat_previous",maxgap=6,na.rm=FALSE))
na.locf(testidata,maxgap=6,na.rm=FALSE)
interpolate_NA_values(testidata,"repeat_previous",maxgap=6)
library(MOSpointutils)
interpolate_NA_values(testidata,"repeat_previous",maxgap=6)
library(MOSpointutils)
interpolate_NA_values(testidata,"repeat_previous",maxgap=6)
testidata
na.locf(testidata,maxgap=6,na.rm=FALSE)
interpolate_NA_values(testidata,"repeat_previous",maxgap=6)
na.approx(testidata,maxgap=6,na.rm=FALSE)
interpolate_NA_values(testidata,"linear_interp",maxgap=6)
na.approx(testidata,na.rm=FALSE,maxgap=6)
testidata
na.approx(testidata,na.rm=FALSE,maxgap=6)
na.approx(testidata,maxgap=6,na.rm=FALSE)
interpolate_NA_values(testidata,"linear_interp",maxgap=6)
interpolate_NA_values(testidata,"spline_interp",maxgap=6)
na.spline(testidata,maxgap=6,na.rm=FALSE)
na.spline.default(testidata,maxgap=6,na.rm=FALSE)
na.spline.default(testidata,maxgap=6)
na.spline.default(testidata,na.rm=FALSE)
na.spline(testidata,na.rm=FALSE)
na.spline.default(testidata,maxgap=6,na.rm=FALSE)
library(MOSpointutils)
interpolate_NA_values(testidata,"spline_interp",maxgap=6)
interpolate_NA_values(testidata,"linear_interp",maxgap=6)
na.approx(testidata,maxgap=6,na.rm=FALSE)
testidata
interpolate_NA_values(testidata,"linear_interp")
na.approx(testidata,na.rm=FALSE)
interpolate_NA_values(testidata,"spline_interp")
na.spline(testidata,na.rm=FALSE)
interpolate_NA_values(testidata,"spline_interp",maxgap=6)
na.spline(testidata,na.rm=FALSE,maxgap=6)
interpolate_NA_values(testidata,"repeat_previous",maxgap=6)
interpolate_NA_values(testidata,"repeat_previous")
na.locf(testidata,na.rm=FALSE)
na.locf(testidata,na.rm=FALSE,maxgap=6)
interpolate_NA_values(testidata,"no_interp")
testidata
